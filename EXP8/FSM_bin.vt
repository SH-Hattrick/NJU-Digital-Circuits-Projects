// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "10/02/2018 09:03:34"
                                                                                
// Verilog Test Bench template for design : FSM_bin
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module FSM_bin_vlg_tst();
// test vector input registers
reg clk;
reg in;
reg reset;
// wires                                               
wire out;
wire [3:0] state;

FSM_bin i1 (
	.clk(clk),
	.in(in),
	.out(out),
	.reset(reset),
	.state(state)
);
initial                                                
begin
	clk = 0; reset = 1; #7; reset = 0;
	in = 1; #47;
	in = 0; #20;
	in = 1; #5;
	in = 0; #42;
	in = 1; #15;
	reset = 1; #5;
$stop;
$display("Running testbench");                       
end
                                                   
always
begin
	#5 clk = ~clk;
end
endmodule

